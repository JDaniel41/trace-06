{"version":3,"sources":["components/IntroScreen.js","components/QuestionCard.js","App.js","index.js"],"names":["IntroScreen","startGameCallback","previousStreak","className","href","onClick","QuestionCard","answeredCallback","questionNum","useState","questionCategory","setQuestionCategory","questionDifficulty","setQuestionDifficulty","questionText","setQuestionText","correctAnswer","setCorrectAnswer","questionIsReady","setQuestionIsReady","useEffect","console","log","axios","get","then","response","question","data","results","category","difficulty","correct_answer","catch","err","he","decode","App","questionStreak","setQuestionStreak","setQuestionNum","gameStarted","setGameStarted","answerReceived","responseWasCorrect","oldStreak","oldNum","ReactDOM","render","document","getElementById"],"mappings":"yLA4BeA,MA5Bf,YAA6D,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,eACtC,OACI,sBAAKC,UAAU,0EAAf,UACI,oBAAIA,UAAU,4BAAd,gCACA,oBAAGA,UAAU,OAAb,wGAEmC,IAC/B,mBACIA,UAAU,YACVC,KAAK,gDAFT,qCAOJ,wBACID,UAAU,6BACVE,QAASJ,EAFb,SAIKC,EACK,uCACAA,EACA,IACA,sC,kCCuDPI,MAzEf,YAA0D,IAAlCC,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,YACtC,EAAgDC,qBAAhD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAoDF,qBAApD,mBAAOG,EAAP,KAA2BC,EAA3B,KACA,EAAwCJ,qBAAxC,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA0CN,qBAA1C,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAA8CR,oBAAS,GAAvD,mBAAOS,EAAP,KAAwBC,EAAxB,KA6DA,OAbAC,qBAAU,WACNC,QAAQC,IAAI,kBACZC,IACKC,IAAI,qDACJC,MAAK,SAACC,GAlDf,IAAsBC,EAmDVN,QAAQC,IAAII,EAASE,MAnDXD,EAoDGD,EAASE,KAAKC,QAAQ,GAnD3CR,QAAQC,IAAIK,GACZhB,EAAoBgB,EAASG,UAC7BjB,EAAsBc,EAASI,YAC/BhB,EAAgBY,EAASA,UACzBV,EAAiBU,EAASK,gBAC1Bb,GAAmB,MAgDdc,OAAM,SAACC,GACJb,QAAQC,IAAIY,QAErB,CAAC1B,IAGA,qBAAKL,UAAU,iCAAf,SACKe,EAlDD,sBAAKf,UAAU,iDAAf,UACI,oBAAIA,UAAU,UAAd,SAAyBO,IACzB,oBAAIP,UAAU,qBAAd,SAAoCS,IACpC,4BAAIuB,IAAGC,OAAOtB,KAEd,sBAAKX,UAAU,2BAAf,UACI,wBACIA,UAAU,mEACVE,QAAS,kBACLE,EAAiB,SAAWS,IAHpC,kBAQA,wBACIb,UAAU,uDACVE,QAAS,kBACLE,EAAiB,UAAYS,IAHrC,yBAeR,qBAAKb,UAAU,4BAAf,SACI,wDCSDkC,MAzDf,WACI,MAA4C5B,mBAAS,GAArD,mBAAO6B,EAAP,KAAuBC,EAAvB,KACA,EAAsC9B,mBAAS,GAA/C,mBAAOD,EAAP,KAAoBgC,EAApB,KACA,EAAsC/B,oBAAS,GAA/C,mBAAOgC,EAAP,KAAoBC,EAApB,KAEA,SAASC,EAAeC,GACpBvB,QAAQC,IAAIsB,GACRA,EACAL,GAAkB,SAACM,GAAD,OAAeA,EAAY,KAE7CH,GAAe,GAEnBF,GAAe,SAACM,GAAD,OAAYA,EAAS,KAmCxC,OACI,gCACKL,EARD,qBAAKtC,UAAU,2CAAf,SACKsC,EAAc,mBAAqBH,EAAiB,OAOxB,KACjC,qBAAKnC,UAAU,2CAAf,SACKsC,EAnBL,cAAC,EAAD,CACIjC,YAAaA,EACbD,iBAAkBoC,IAlBN,IAAhBnC,EAEI,cAAC,EAAD,CAAaP,kBAAmB,kBAAMyC,GAAe,MAIrD,cAAC,EAAD,CACIzC,kBAAmB,kBAAMyC,GAAe,IACxCxC,eAAgBoC,UCvBpCS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4d6d678b.chunk.js","sourcesContent":["function IntroScreen({ startGameCallback, previousStreak }) {\n    return (\n        <div className=\"h-auto w-1/2 self-center shadow-2xl p-5 rounded-lg bg-white text-center\">\n            <h1 className=\"text-center py-2 text-2xl\">Welcome to Trivia!</h1>\n            <p className=\"pb-2\">\n                This game was developed by Jonathan Daniel during the Summer\n                2021 Trace Camp. Click here to{\" \"}\n                <a\n                    className=\"underline\"\n                    href=\"https://www.linkedin.com/in/jonathandaniel23/\"\n                >\n                    Connect on LinkedIn.\n                </a>\n            </p>\n            <button\n                className=\"text-center pb-2 font-bold\"\n                onClick={startGameCallback}\n            >\n                {previousStreak\n                    ? \"Try to beat your previous streak of \" +\n                      previousStreak +\n                      \"!\"\n                    : \"Click Here to start the Game!\"}\n            </button>\n        </div>\n    );\n}\n\nexport default IntroScreen;\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport he from \"he\";\n\nfunction QuestionCard({ answeredCallback, questionNum }) {\n    const [questionCategory, setQuestionCategory] = useState();\n    const [questionDifficulty, setQuestionDifficulty] = useState();\n    const [questionText, setQuestionText] = useState();\n    const [correctAnswer, setCorrectAnswer] = useState();\n    const [questionIsReady, setQuestionIsReady] = useState(false);\n\n    function populateData(question) {\n        console.log(question);\n        setQuestionCategory(question.category);\n        setQuestionDifficulty(question.difficulty);\n        setQuestionText(question.question);\n        setCorrectAnswer(question.correct_answer);\n        setQuestionIsReady(true);\n    }\n\n    function displayQuestion() {\n        return (\n            <div className=\"shadow-2xl p-5 rounded-lg bg-white text-center\">\n                <h1 className=\"text-xl\">{questionCategory}</h1>\n                <h2 className=\"text-lg capitalize\">{questionDifficulty}</h2>\n                <p>{he.decode(questionText)}</p>\n\n                <div className=\"flex justify-around py-4\">\n                    <button\n                        className=\"bg-green-600 py-2 px-5 rounded-lg text-white font-bold font-sans\"\n                        onClick={() =>\n                            answeredCallback(\"True\" === correctAnswer)\n                        }\n                    >\n                        True\n                    </button>\n                    <button\n                        className=\"bg-red-600 py-2 px-5 rounded-lg text-white font-bold\"\n                        onClick={() =>\n                            answeredCallback(\"False\" === correctAnswer)\n                        }\n                    >\n                        False\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    function displayLoadingScreen() {\n        return (\n            <div className=\"shadow-2xl p-5 rounded-lg\">\n                <h1>Loading Question!</h1>\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        console.log(\"Effect Running\");\n        axios\n            .get(\"https://opentdb.com/api.php?amount=1&type=boolean\")\n            .then((response) => {\n                console.log(response.data);\n                populateData(response.data.results[0]);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [questionNum]);\n\n    return (\n        <div className=\"w-1/2 xl:w-3/4 p-5 self-center\">\n            {questionIsReady ? displayQuestion() : displayLoadingScreen()}\n        </div>\n    );\n}\n\nexport default QuestionCard;\n","import { useState } from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport QuestionCard from \"./components/QuestionCard\";\n\nfunction App() {\n    const [questionStreak, setQuestionStreak] = useState(0);\n    const [questionNum, setQuestionNum] = useState(0);\n    const [gameStarted, setGameStarted] = useState(false);\n\n    function answerReceived(responseWasCorrect) {\n        console.log(responseWasCorrect);\n        if (responseWasCorrect) {\n            setQuestionStreak((oldStreak) => oldStreak + 1);\n        } else {\n            setGameStarted(false);\n        }\n        setQuestionNum((oldNum) => oldNum + 1);\n    }\n\n    function renderNonGameScreen() {\n        if (questionNum === 0) {\n            return (\n                <IntroScreen startGameCallback={() => setGameStarted(true)} />\n            );\n        } else {\n            return (\n                <IntroScreen\n                    startGameCallback={() => setGameStarted(true)}\n                    previousStreak={questionStreak}\n                />\n            );\n        }\n    }\n\n    function renderQuestionCard() {\n        return (\n            <QuestionCard\n                questionNum={questionNum}\n                answeredCallback={answerReceived}\n            />\n        );\n    }\n\n    function renderHeading() {\n        return (\n            <div className=\"fixed bg-white w-screen text-center py-2\">\n                {gameStarted ? \"Current Streak: \" + questionStreak : null}\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {gameStarted ? renderHeading() : null}\n            <div className=\"flex justify-center h-screen bg-blue-100\">\n                {gameStarted ? renderQuestionCard() : renderNonGameScreen()}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}